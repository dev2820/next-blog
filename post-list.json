[{"content":"\n## 서문\n\n이 글은 Goto문을 사용하지 말아야한다고 주장하는 다익스트라의 논문 \"[Go To statement Considered Harmful](https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf)\"을 읽고 개인적인 감상평을 이야기하는 글입니다.\n\n<br />\n\n## 리뷰하기 앞서: Goto문이란\n\n```c\n#include <stdio.h>\n\nint main() {\n  int number = 5;\n  if (number >= 0) {\n      goto even;\n  } else {\n      goto odd;\n  }\n\neven:\n    printf(\"짝수\");\n\nodd:\n    printf(\"홀수\");\n\nreturn 0;\n}\n```\n\n위의 코드와 같이 지정한 레이블로 코드 흐름을 즉시 이동하는 일종의 jump 문법입니다. C를 배워본 사람은 알겠지만, 문법은 있지만 거의 쓰지 말라고 배웁니다.\n\n## Goto문은 해롭다고 여겨진다\n\n서두에서 다익스트라는 goto문을 적게 쓸수록 실력 좋은 프로그래머라는 생각이 든다고 밝히며 고차원 개발 언어 (high level langauge) goto문을 제외할 것을 제안합니다.그에 앞서 2가지, 주장이 시작되기 전 필요한 공통된 이해를 설명하는데 각각 다음과 같습니다.\n\n<br />\n\n### 기저1: 프로그래밍의 목적은 프로그램이 만드는 프로세스에 있다\n\n<br />\n\n\"프로그래밍의 목적은 프로그램 그 자체가 아닌 프로그램이 만드는 프로세스에 있다.\"\n\n<br />\n\n어찌보면 당연한 이야기입니다. 우리가 프로그램을 만드는 것은 프로그램이 원하는 동작을 하길 바라기 때문입니다. 예를 들어 계산기 프로그램을 만드는 이유는 계산기가 '계산'을 하길 기대하기 때문입니다. 논리적으로 문제가 없는 계산기 프로그램을 만들더라도 그것이 계산기가 `1+1=2` 라는 간단한 계산도 제대로 못한다면 우리는 계산기를 만들었다고 할 수 없습니다.\n\n<br />\n\n또한 프로그래머는 한번 만들어진 프로그램의 동작에 개입할 수 없습니다. 즉, 계산이라는 프로세스는 오직 계산기에 의해서만 이루어진다는 것이죠.\n\n<br />\n\n### 기저2: 인간은 동적인 프로세스를 파악하는 지능이 정적인 관계를 이해하는 지능보다 상대적으로 낮다.\n\n쉽게 이야기해서 정적인 코드를 해석하는 것은 쉽지만, 동적인 프로세스가 어떻게 진행되었는지는 파악하기 어렵다는 이야기입니다.다음의 코드를 봅시다.\n\n```js\nlet count = 0;\n\nwhile (count < 100) {\n  if (count % 13 < 3) {\n    count /= 6;\n  } else {\n    count += 5;\n  }\n}\n```\n\n우리는 위 프로그램이 \"count가 100보다 커지면 종료된다\" 그리고 \"count는 13으로 나누어 나머지가 3보다 작으면 6으로 나누고 아니면 5를 더한다\" 라는 규칙을 쉽게 파악할 수 있습니다.하지만 count는 프로세스가 진행됨에 따라 변형되고 특정 타이밍에 count의 값이 어떻게 되는지는 파악하기 어렵습니다. 예를 들어 10번째 루프에서 count의 값이 어떻게 되는지 바로 파악이 되시나요?\n\n<br />\n\n따라서 다익스트라는 정적인 프로그램과 동적인 프로세스 사이의 갭을 최대한 줄여야한다고 주장합니다.\n\n<br />\n\n### 프로세스의 진행도를 알기 위해 필요한 것들\n\n만약 A라는 언어로 작성된 프로그램이 다음과 같이 할당문의 연속으로 구성되어 있다고 합시다.\n\n```js\nconst a = 1;\nconst b = 2;\nconst c = 3;\nlet e = c;\ne = e * a;\n// ...\n```\n\n위의 코드에서 특정 시점의 프로세스의 상태를 설명할 땐 코드의 한 지점을 가리키면 됩니다. 이를 텍스트 인덱스(textual index)라고 합시다.이해를 위해 조건을 붙이겠습니다.\n\nA 언어는 한 줄에 하나의 명령만 실행할 수 있습니다. 즉, `const a = 1; const b = 2;` 와 같이 한 줄에 이어서 코드를 작성할 수 없습니다.\n\n<br />\n\n이제 텍스트 인덱스는 line number와 일치하게 됩니다. 몇번 줄을 진행하고 있는지 알려주는 것으로 프로세스가 얼만큼 진행되었는지 알 수 있습니다.\n\n<br />\n\n언어에 if문, if-else문, switch문 같은 분기를 발생시키는 문법을 포함하게 되면 코드 안에서 건너뛰는 부분이 생길지라도 여전히 몇번 줄을 진행하고 있는지 알려주는 것으로 프로세스의 진행도를 알 수 있습니다.\n\n```js\nconst a = 1;\nconst b = 2;\nconst c = 3;\nlet e = c;\nif (a === 3) {\n  e = e * a;\n} else {\n  e = e * b;\n}\n// if-else가 추가되었고 일부 코드 진행이 생략될 수 있게\n// 되었지만, 프로세스의 진행 상태를 lineNumber를 가리키는 것으로\n// 특정할 수 있는 것은 여전하다.\n```\n\n이제 A언어에 \"절차(procedure)\"라는 개념을 추가해봅시다. 절차는 일종의 subRutine, function이라고 보면 됩니다.\n\n```js\nfunction add3(num) {\n  const three = 3;\n\n  return num + three;\n}\n\nconst a = 1;\nconst b = 2;\nconst c = 3;\nlet d = c;\n\nd = add3(0);\nconst e = add3(d);\n\n// 이제 텍스트 인덱스가 2를 가리킨다고 해도\n// 12번 줄의 add3를 호출해서 인덱스 2에 도달했는지,\n// 13번 줄의 add3를 호출해서 인덱스 3에 도달했는지\n// 알 수 없다.\n```\n\n절차가 추가된 언어에선 텍스트 인덱스로는 프로세스의 상태를 설명할 수 없습니다.\n\n2번줄을 진행하고 있다고만 말하는 것으로는 12번줄 다음 2번줄로 왔는지, 13번줄 다음 2번줄로 왔는지 알 수 없습니다. 따라서 프로세스의 진행 상태를 나타내려면 텍스트 인덱스가 어떤 절차 안에 들어있는지를 함께 명시해야만 합니다.\n\n<br />\n\n이제 프로세스의 진행도는 텍스트 인덱스의 배열로 나타낼 수 있습니다. js가 함수 호출 스택을 만드는 것으로 이해하면 됩니다. 앞선 예시로 보면\n\n`[12, 2]` : 12번 줄 다음 2번줄로 이어짐\n\n`[12, 3]` : 13번 줄 다음 3번줄로 이어짐으로 이해할 수 있습니다.\n\n<br />\n\n배열의 길이는 함수가 얼마나 깊게 호출되는지에 따라 결정될 것입니다.이제 반복문을 A언어에 추가해봅시다.\n\n```js\nfunction add3(num) {\n  const three = 3;\n\n  return num + three;\n}\n\nconst a = 1;\nconst b = 2;\nconst c = 3;\nlet d = c;\n\nd = add3(0);\nconst e = add3(d);\n\nwhile (d > 0) {\n  d--;\n}\n\nwhile (e > 0) {\n  e--;\n  add3(10);\n}\n\n// 이제 얼만큼 반복되었는지도 알아야 프로세스의 진행도를 알 수 있다.\n```\n\n이제 프로세스의 맥락을 이해하려면 반복문의 반복 횟수까지 알아야합니다.반복 횟수를 나타내기 위해 \"동적 인덱스(dynamic index)\"라는 개념을 추가합시다.\n\n반복문 안에서 함수를 호출할수도 있으니, 텍스트 색인 배열과 동적 인덱스를 알아야 프로세스의 진행도를 알 수 있습니다.\n\n`[21, 2], 1` : 21번 줄을 1번째 진행중이었고 함수를 통해 2번 줄을 진행중임\n\n`[15], 2` : 15번 줄을 2번째 진행중이었음\n\n<br />\n\n### 프로세스의 진행도는 왜 알아야하죠?\n\n앞서 언급한 텍스트 인덱스의 배열, 동적 인덱스를 통해 프로세스의 진행 과정을 나타내는데 성공했습니다.왜 우리가 이런 인덱스를 동원해 프로세스의 특정 진행 지점을 알아야할까요?\n\n<br />\n\n그 이유는 **우리가 변수의 값을 프로세스의 진행을 통해서만 해석할 수 있기 때문**입니다.방의 인원수를 나타내는 변수 n이 있고 0부터 시작한다고 해봅시다.\n\n```js\n// n은 방의 인원수를 나타낸다.\nlet n = 0;\n```\n\n이제 우리는 방에 사람이 들어올때마다 n을 증가시켜 방의 인원수를 나타낼 수 있습니다.\n\n```js\nlet n = 0;\nwhile (untilPeopleIncome) {\n  n++;\n}\n\nn; // 방의 인원수\n```\n\n### Goto는 이러한 좌표계를 무너뜨린다\n\ngoto를 이용해 3번줄로 이동해버리면 n의 의미가 깨집니다. n은 이제 방의 인원수보다 큰 수 일수도 있습니다.\n\n```js\nlet n = 0;\nwhile(untilPeopleIncome) {\n  n++;\n}\nif(someCondition) {\n  goto 3\n}\nn; // 방의 인원수와 같다고 할 수 있을까?\n```\n\ngoto문을 무분별하게 사용하다보면 이렇게 텍스트 인덱스, 동적 인덱스로 나타낼 수 있는 프로세스의 진행도를 무의미하게 만듦니다. 텍스트 인덱스, 동적 인덱스가 고유하더라도 그에 해당하는 프로세스의 진행도의 해석이 더 이상 유의미하지 않기 때문입니다.\n\n### 결론: 그럼에도 불구하고\n\n다익스트라는 goto문은 너무 원시적이라 프로그램을 망치기 딱 좋다고 말하지만, abortion문 (js의 `throw`) 같이 프로세스의 흐름을 건너뛰는 것 자체를 부정하지는 않습니다. 하지만 이런 문법이 프로세스를 해석하는 것을 방해해선 안된다고 합니다.\n\n## 요약\n\n1.  우리는 상태값을 해석하려면 프로세스의 진행도를 알아야 한다.\n2.  근데 goto를 무분별하게 쓰면 프로세스의 진행도를 알아도 상태값을 해석하기 어려워진다.\n3.  그러니까 goto 쓰지마라\n4.  그래도 throw같은 코드를 쓰지 말라는 것은 아니다. 상태 해석에만 문제가 없으면 상관 없다.\n\n## 리뷰 후기\n\n이제는 거의 사라져서 볼 수 없는 goto 문법이지만, 여전히 goto의 제한된 버전인 `throw` 같은 문법들이 현대 개발 언어에 남아있다는 점이 논문을 읽는데 재미있는 포인트들이었습니다.\n\n논문에서 언급하지는 않지만, `throw` 같은 abortion 문도 막아야한다고 주장하지 않은 것은 에러가 발생했을 때만 점프가 일어나 해석을 방해하지 않기 때문이라고 생각합니다.\n\n앞으로는 코드를 작성할 때 프로세스의 흐름 파악과 해석을 어렵게 하고 있지 않은지 좀 더 주의깊게 봐야할 것 같습니다.\n\n<br />\n\n리뷰에 적지는 않았지만, 흥미로운 점이 하나 더 있었습니다. 논문 내에서 재귀로 반복문을 없앨 수 있지만, 성능상 이유로 반복문은 있는게 좋은 것 같다고 하는 점, 그리고 정적인 코드와 동적인 프로세스 사이의 갭을 줄여야한다고 하는 것도 그렇고 이미 좋은 코드는 선언적이라는 함수형 패러다임에 대한 인사이트를 어느정도 가지고 있다는 점입니다.\n\n<br />\n","data":{"title":"Go To statement Considered Harmful 논문 리뷰","published":"2024-02-17T07:57:03.274Z","modified":"2024-02-17T07:57:03.274Z","slug":"go-to-statement-considered-harmful-review","draft":true,"tags":["goto","논문 리뷰","프로그래밍"],"summary":"다익스트라의 논문 Go To statement Considered Harmful를 읽고 리뷰합니다"},"isEmpty":false,"excerpt":""},{"content":"\n## V8은 정렬 이전과 이후에 무엇을 하는가\n\nV8은 한 개의 전처리 과정과 한 개의 후처리 과정을 거친다. 기본적인 아이디어는 다음과 같다.\n\n> 모든 `undefined` 값들을 임시 list에 모은 뒤, `undefined`가 아닌 값들을 정렬하고 `undefined`를 뒤에 붙인다.\n\n### 전처리 과정\n\n먼저 배열의 값들을 다음과 같이 분류한다.\n\n1. 모든 `undefined`가 아닌 값들(비교 함수에 따라 정렬될 값)\n2. 모든 `undefined`값들\n3. 모든 빈칸, 즉 존재하지 않는 속성들\n\n실제 정렬 알고리즘은 첫 번째 분류(undefined가 아닌 값)에만 적용되면 된다. 이를 위해서 V8은 다음과 같이 동작하는 전처리 과정을 가진다.\n\n1. 배열을 순회하며\n   1. 만약 원소가 hole이다. -> 아무것도 하지 않는다.\n   2. 만약 원소가 `undefined`이다. -> `numberOfUndefineds`의 값을 1 증가시킨다.\n   3. 둘 다 아니라면 원소를 elements라는 임시 배열에 추가한다.\n\n이 작업이 이루어지면, 모든 `undefined`가 아닌 값들은 `elements`라는 임시 배열에 담기게 된다. `undefined`들은 개수만 알면 된다. 자바스크립트 sort의 명세에 따르면 `undefined` 들이 맨 끝에 정렬되어야한다. `undefined` 값들은 실제로 유저가 제공한 비교 함수에 전달되지 않을 것이기 때문에 `undefined`가 등장한 횟수만 새면 된다.\n\n다음으로 `elements` 배열을 실제로 정렬한다. 글의 후반부 TimSort 섹션에서 자세한 내용을 다룬다.\n\n### 후처리 과정\n\n전처리를 거치고 얻은 정렬된 값들을 원본 배열 혹은 객체에 덮어써야 한다. 후처리 과정은 다시 세 단계로 구성된다.\n\n1. 원본 객체의 앞부터 `elements` 배열로 덮어쓴다.\n2. 그 뒤를 `numberOfUndefineds` 값만큼 `undefined`로 채운다.\n3. 나머지 값들은 삭제한다.\n\n3번 과정은 정렬하려는 원본 객체에 hole이 포함된 경우에 필요하다. 3번을 하지 않으면 배열에 중복된 값이 생길 수 있다.\n\n## 과거의 정렬 방식 (QuickSort)\n\n`Array.prototype.sort` 와 `TypedArray.prototype.sort` 는 자바스크립트로 구현된 Quicksort 구현체에 의존했었다. 정렬 알고리즘 다소 단순하다: 기본적으로는 Quicksort를 하지만, 길이가 짧은 배열(length < 10)에 대해서는 삽입 정렬을 사용한다. Quicksort 재귀 중 하위 배열의 길이가 10에 도달하면 삽입 정렬로 대체된다. 작은 배열에 대해서는 삽입 정렬이 더 효율적인데, 이는 Quicksort가 분할 이후 재귀적으로 두 번 호출되기 때문이다. 각 재귀 호출은 스택 프레임을 생성하고(그리고 제거하는) 오버헤드가 있다.\n\nQuicksort에서 적절한 pivot을 선택하는 것은 성능에 큰 영향을 준다. V8은 2가지 전략을 채택했다.\n\n- 피봇은 정렬될 배열의 첫 번째, 마지막 그리고 third-element 중 중앙값으로 선택되었다. 작은 배열의 경우 third-element는 단순히 배열의 중간 요소로 선정했다.\n- 큰 배열에선 표본을 추출하고, 표본을 정렬한 뒤, 정렬된 표본의 중앙값을 위 계산의 third-element로 사용했다.\n\n퀵소트의 이점 중 하나는 in-place 정렬을 한다(혹은 그렇게 구현할 수 있다)는 것이다. 메모리 오버헤드는 큰 배열을 정렬할 때 표본을 저장하기 위한 작은 배열 할당과 log(n)의 스택 영역 할당뿐이다. 단점은 안정정렬이 아니라는 점과 QuickSort는 최악의 상황에 O(n^2)의 성능을 보인다는 점이다. 즉, 안정적이지 않았다.\n\n## 현재의 정렬 방식 (Timsort)\n\n2002년 파이썬에 탑재하기 위해 Tim Peter가 개발한 **Timsort**는 Merge sort와 Insertion sort를 기반으로 다양한 최적화 기법을 적용한 정렬이다. 현재는 Python, V8, Swift, Java SE 7 등 다양한 언어에서 채택되었다.\n\n기본적인 아이디어는 다음과 같다.\n\n> 연속적으로 정렬된 부분을 \"run\"이라고 하자.\n>\n> 대부분의 현실 세계 데이터에는 이미 자연적으로 생긴 run들이 포함되어 있다.\n> 이 run들을 이용하면 비교와 swap 비용을 줄일 수 있다.\n>\n> 따라서 이 run들을 최대한 활용해 보자!\n\n### run이란 무엇인가?\n\nrun은 배열 내에 자연적으로 발생한 연속 정렬된 부분 수열이다.\n\n![random_array](./images/random_array.jpg)_랜덤한 배열_\n\n위와 같이 10개 원소를 가진 배열이 있다고 하자.\n![run_example](./images/run_example.jpg)\n\n위의 배열에서 run을 찾으면 (7,4) (9,3) (8,6,2) (10,1) (5)이 있다.\n\nrun은 마지막 원소가 run이 되는 경우를 제외하고는 항상 길이가 2보다 길다.\n\nrun은 증가하는 경우와 감소하는 경우 둘 다 상관없다. 배열을 증가하도록 정렬할 때 감소하는 run은 단순히 뒤집기만 하면 증가하는 run으로 만들 수 있기 때문이다.\nrun을 뒤집을 때는 양 끝값을 서로 swap하며 중앙으로 수렴하는 방식을 이용한다. 이때 stable을 지키기 위해 두 값을 비교해 한쪽이 엄격하게 작은 경우에만 swap한다.\n\n```js\nfunciton reverseRun(arr) {\n  const middle = Math.floor(arr.length / 2)\n\n  for(let i=0;i<middle;i++) {\n    if(arr[i] === arr[arr.length-i-1]) {\n      // arr는 어느 방향으로든 정렬이 되어있기 때문에 swap할 두 값의 값이 같다면\n      // 더 이상 swap을 할 필요가 없다.\n      break;\n    }\n\n    const temp = arr[i];\n    arr[i] = arr[arr.length-i-1];\n    arr[arr.length-i-1] = temp;\n  }\n}\n```\n\n### 알고리즘 (simple)\n\n알고리즘의 순서는 다음과 같다.\n\n1. minrun의 길이를 결정한다.\n2. 배열을 minrun을 기준으로 잘라 run을 만든다.\n3. run을 병합한다. (1개의 배열이 될 때까지 반복한다)\n\n### minrun의 크기를 결정하는 방식\n\nrun의 크기는 배열의 길이에 따라 유동적으로 결정된다.\n\n배열의 원소 수를 N이라고 하자. minrun이 될 수 있는 최대 값을 MAX_MINRUN이라고 하겠다.\nN < MAX_MINRUN이라면 minrun값은 N이 된다. 즉, run을 나누지 않는다. 대신 배열을 binary insertion sort한다. 앞서 언급했듯, 작은 배열에선 삽입정렬이 더 효율적이기 때문이다.\n\nMerge Sort에선 Merge(병합)해야하는 배열의 수가 2의 거듭제곱 (2^x)일때 가장 효율적이다.\n그럴 수 없다면 2의 거듭제곱보다 조금 적을 때 효과적이다. 가장 최악은 2의 거듭제곱보다 조금 더 많은 경우이다.\n\n따라서 run의 수가 2의 거듭제곱이 될 수 있게 minrun의 길이를 결정하는 것이 좋다.\n\n예를 들어보자, N=2112, run의 길이는 32라고 하자.\nrun의 개수는 2112/32 = 66개가 나온다.\n\n66개의 run들을 병합하는 과정을 보자. 각 병합에는 최악의 경우 `2 * (run의 길이) - 1` 번의 비교가 일어난다. 최악의 경우를 따져보자.\n\n1. 32길이의 run을 33번 병합해야 한다. 63 \\* 33번의 비교가 발생했다. (64길이 33개의 run이 남았다)\n2. 64길이의 run을 16번 병합해야 한다. 127 \\* 16번의 비교가 발생했다. (128길이 16개, 64길이 1개의 run이 남았다)\n3. 128길이의 run과 64길이의 run을 병합한다. 128 + 64 - 1번의 비교가 발생했다. (128길이 15개, 192길이 1개의 run이 남았다)\n4. 128길이의 run을 7번 병합해야 한다. 255 \\* 7번의 비교가 발생했다. (256길이 7개, 192길이 1개, 128길이 1개의 run이 남았다)\n5. 192길이의 run 1개와 128길이의 run을 병합한다. 192 + 128 - 1번의 비교가 발생했다. (256길이 7개, 320길이 1개의 run이 남았다)\n6. 256길이의 run을 3번 병합해야 한다. 511 \\* 3번의 비교가 발생했다. (512길이 3개, 320길이 1개, 256길이 1개의 run이 남았다)\n7. 320길이의 run 1개와 256길이의 run을 병합한다. 320 + 256 - 1번의 비교가 발생했다. (512길이 3개, 576길이 1개의 run이 남았다)\n8. 512길이의 run을 1번 병합해야 한다. 1023번의 비교가 발생했다. (1024길이 1개, 576길이 1개, 512길이 1개의 run이 남았다)\n9. 576길이의 run 1개와 512길이의 run을 병합한다. 1088번의 비교가 발생했다. (1088길이 1개, 1024길이 1개의 run이 남았다)\n10. 1088길이의 run 1개와 1024길이의 run을 병합한다. 2111번의 비교가 발생했다. (병합 완료)\n\n모두 **12736**번의 비교가 발생한다.\n\n하지만 run의 길이가 33이라면 어떨까?\nrun의 개수는 2112/33 = 64개가 나온다.\n\n같은 방식으로 병합을 진행해 보자.\n\n1. 33길이의 run을 32번 병합해야 한다. 65 \\* 32번의 비교가 발생했다.\n2. 66길이의 run을 16번 병합해야 한다. 131 \\* 16번의 비교가 발생했다.\n3. 132길이의 run을 8번 병합해야 한다. 263 \\* 8번의 비교가 발생했다.\n4. 264길이의 run을 4번 병합해야 한다. 527 \\* 4번의 비교가 발생했다.\n5. 528길이의 run을 2번 병합해야 한다. 1055 \\* 2번의 비교가 발생했다.\n6. 1056길이의 run을 1번 병합해야 한다. 2111 \\* 1번의 비교가 발생했다.\n\n모두 **12609**번의 비교가 발생한다.\n\n즉, run의 길이가 길어지더라도 run의 개수가 2의 거듭제곱과 일치하면 더 적은 비교가 발생한다.\nrun의 개수가 2의 거듭제곱보다 조금 많을 때 최악의 경우가 발생한다.\n\n> run의 개수가 2의 거듭제곱과 같다면 효율적이다.\n> run의 개수가 2의 거듭제곱보다 조금 클 때 비효율적이다.\n\n따라서 N / minrun이 2의 거듭제곱이 되는 minrun을 선택하고, 그런 minrun을 선택할 수 없다면 2의 거듭제곱에 가깝지만 엄격하게 2의 거듭제곱보다 작아지도록 `MAX_MINRUN / 2 ~ MAX_MINRUN` 사이의 값 중에서 minrun을 선택한다.\n예를 들어 MAX_MINRUN이 64라면 32 ~ 64중에 minrun을 선택한다.\n\nTimsort에선 실제로 MAX_MINRUN을 64로 잡는다. MAX_MINRUN이 8이면 함수 호출이 너무 많아 오버헤드가 더 크고 256이면 binary insertion sort가 느려 마찬가지로 영향을 주는 것을 확인했고, 최종적으로 32를 최적이라 생각했지만, 2112길이의 배열 예시처럼 2의 거듭제곱을 만들 수 있도록 32보다 큰 값을 허용하는 것이 좋다고 판단했기 때문이다.\n\n### Insertion sort를 이용하는 이유\n\nInsertion sort(삽입 정렬)는 언뜻 보면 n^2의 시간복잡도를 가져 느리다고 생각할 수 있다. 하지만 앞서 Quicksort에서 설명했듯, 작은 길이 배열에 대해선 2번의 재귀 호출이 일어나는 Merge Sort보다 참조 지역성 원리의 수혜를 아주 잘 누리는 Insertion sort가 더 효율적이다.\n\n특히 배열이 이미 어느 정도 정렬되어 있으면 Insertion Sort는 더욱 효과적으로 된다. Insertion Sort는 최선의 경우 O(n)만큼의 복잡도를 갖기 때문이다.\n\n여기에 Binary Insertion sort를 사용하면 원소가 삽입될 위치를 O(nlogn)만에 찾도록 더 최적화할 수 있다.\n\n### minrun를 기준으로 run 만들기\n\n주어진 배열의 길이로부터 minrun을 결정했다. 이제 minrun에 맞춰 배열을 자른다.\n앞서 minrun은 32~64 사이의 값을 사용한다고 했지만, 이해를 위해 minrun의 값을 4로 잡자.\n\n![find minrun 1](./images/find_minrun1.jpg)\n\n먼저 감소하는 부분수열 (7,4)를 찾았다. 하지만 minrun의 길이 4보다 짧기 때문에 뒤의 2개 수를 더 포함해 Binary Insertion Sort를 수행한다.\n\n![find minrun 2](./images/find_minrun2.jpg)\n\n이로써 minrun을 만족하는 첫 번째 run을 만들었다.\n다음 run을 만들어보자.\n\n![find minrun 3](./images/find_minrun3.jpg)\n\n마찬가지로 감소하는 길이 3인 부분 수열 (8,6,2)를 찾았다. 마지막 원소를 추가해 Binary Insertion Sort를 수행한다.\n\n![find minrun 4](./images/find_minrun4.jpg)\n\n2번째로 생성한 run은 minrun 길이는 만족했지만, run은 길수록 좋다. 따라서 뒤에 붙은 원소들을 포함해도 감소/증가하는 부분 수열임을 만족한다면 생성한 run에 추가한다.\n\n앞선 run에선 (10)을 포함할 수 없었다. 감소하는 run이었기 때문이다.\n이번 run에선 뒤의 원소 (1)을 붙여도 여전히 감소하는 부분 수열을 만족하기 때문에 (1)을 run에 추가한다.\n\n![find minrun 5](./images/find_minrun5.jpg)\n\n마지막 원소는 합칠 수 있는 원소가 더 이상 없기 때문에 그 자체로 run이 된다.\n\n![find minrun 6](./images/find_minrun6.jpg)\n\n이렇게 해서 배열은 마지막 run을 제외하고 minrun과 같거나 더 긴 run들로 구성되었다.\n이제 이들을 merge하면 된다.\n\n여기서 잠깐, 눈치 챘는지 모르겠지만, TimSort는 일반적인 MergeSort와 달리 재귀가 아닌 반복문을 이용해 구현한다. run을 생성하는 과정은 반복문이 이용된다. 이 덕분에 call stack overflow가 발생하지 않는 점도 최적화 포인트이다.\n\n### run을 병합하기\n\nMerge Sort는 병합할 때 비슷한 길이의 두 배열을 Merge하는 것이 더 효율적이다.\n\n길이 m,h인 두 배열을 Merge할 때 최악의 경우 두 배열을 모두 순회하며 비교해야하기 때문에 m+h-1 만큼의 비용이 든다.\n\n![merge compare](./images/merge_compare.jpg)\n\n5개의 원소를 병합하는 과정을 거칠 때를 예로 들어 보자. 앞의 배열부터 순서대로 병합을 진행한다고 하자. 이렇게 되면 큰 배열과 작은 배열을 연속적으로 병합하는 형태가 될 것이다.\n이때 5개의 원소를 모두 병합하는데 들어가는 비용은 1 + 2 + 3 + 4 = 10이다.\n\n반면 작은 길이 배열을 먼저 병합하는 경우 모든 원소를 병합하는 비용은 1 + 1 + 2 + 4 = 8이다.\n\n> 비슷한 길이의 두 배열을 Merge하는 것이 더 효율적이다.\n\n따라서 Timsort도 비슷한 길이의 배열을 merge할 수 있도록 다음의 방식으로 run들을 병합한다.\n\n![merge_criteria](./images/merge_criteria.jpg)\n\nrun을 생성할 때마다 Stack에 추가한다.\n\n1. 스택의 상위 3개 run을 확인한다. 각각 A, B, C라고 하겠다.\n2. 각 run의 길이는 |A|,|B|,|C|라고 하겠다.\n3. 다음의 조건을 만족하지 않으면 B를 A와 C 중 짧은 쪽과 병합한다.\n   1. |B|가 |A|보다 길다.\n   2. |C|가 |A| + |B| 보다 길다.\n4. 조건을 만족할 때까지 2를 반복한다.\n\n이렇게 하면 결과적으로 다음과 같은 Stack을 얻을 수 있다.\n\n![fibonacci runstack](./images/fibonacci.jpg)\n\n- A + B < C\n- B + C < D\n- C + D < E\n\n이 스택은 마치 피보나치의 수처럼 생겼다.\n\n이 스택을 위에서부터 순서대로 병합을 하면 비슷한 길이의 run들을 병합할 수 있다.\n또한 스택에 원소들을 적게 유지할 수 있다. 피보나치의 수를 1부터 38까지 전부 더하면 1억을 좀 넘는 값이 나온다. 즉, 이러한 형태의 스택은 1억 개가 넘는 원소를 스택에 38개의 원소로 담고 있을 수 있다.\n\n### run 병합 최적화하기 - 메모리 최적화\n\n길이가 m,h인 두 run M,H를 병합할 때 우리는 (m+h)\\*2만큼의 메모리가 필요하다는 것을 알고 있다.\n하지만 실은 간단한 최적화를 통해 2m + h (m < h)만큼의 메모리를 사용하도록 개선할 수 있다.\n\n![merge optimization](./images/merge_optimization.jpg)\n\n위와 같은 run H와 M이 있다고 하자. (m < h)\n\nH 앞에 M을 복사해 붙여 넣는다.\n\n![merge optimization 2](./images/merge_optimization2.jpg)\n\n이제 M의 시작 지점을 i, H의 시작 지점을 j로 두고 각 i와 j를 증가시키며 M의 복사본 + H 배열에 덮어쓰는 식으로 merge를 수행하면 된다.\ni와 j 이전 인덱스는 확인할 필요가 없기 때문에 이러한 전략이 가능하다.\n\n### run 병합 최적화하기 - 검사할 필요가 없는 지점 찾기\n\n![merge optimization 3](./images/merge_optimization3.jpg)\n\nM의 최댓값(즉 M의 마지막 원소)과 최솟값(M의 첫 번째 원소)가 H안의 어디에 위치하는지 확인하면 그 이후는 병합을 수행하지 않아도 된다.\n위 이미지에서 M의 최댓값은 6이며 H[3] = 7보다 작다. 따라서 j가 k(=3)위치에 도착했다면 M[i] ~ M[M.length-1]까지의 값과 H[j] ~ H[H.length-1]값은 비교 없이 배열에 추가해 주면 된다.\n\nM의 최댓값, 최솟값이 H 안에서 어디 위치하는지는 Binary Search로 찾으면 된다.\n\n### run 병합 최적화하기 - Galloping 모드\n\n![galloping1](./images/galloping1.jpg)\n\n앞선 예시에서 H를 좀 더 확장해 j와 k 사이에 많은 원소들이 있다고 치자. M[i] 원소를 삽입하기 전까지 H[j]에서부터 6을 발견할 때까지 j와 k 사이를 순회해야한다.\n\"1개씩 모두 순회하지 않고 중간중간을 생략해 보자!\"가 Galloping의 아이디어이다.\n\n비교할 위치를 2^n씩 건너뛰며 검사한다. 예를 들어 처음 H[1]과 M[1]을 비교했다면 그 다음은 H[2], H[4], H[8]... 형식으로 비교할 index를 증가시킨다.\n만약 H[8]과 비교해도 M[1]이 더 크다면 H[1] ~ H[8]은 M[1]보다 작은 값이니 H[1] ~ H[8]을 비교없이 merge하면 된다. 만약 M[1]이 H[16]보다 작다면 다시 H[8]로 돌아가 index를 1씩 증가시키며 원소를 비교한다.\n\nGalloping은 꽤 효율적으로 보이지만, Galloping이 비효율적인 구간도 있다.\n일반적으로 H[0] ~ H[i]까지의 값이 M[0]보다 작을 때 선형적으로 i를 찾게되면 `i+1`번의 비교가 발생하지만, Galloping을 이용하면 `2 * floor(log(i)) + 2` 번의 비교가 필요하다.\n\n따라서 i가 6보다 크거나 같아지는 순간부터 Galloping이 효율적이게 된다. 따라서 선형 비교를 할지 Galloping을 할지 적절한 전략을 세우는 것이 필요하다. (선형비교가 3번 이상 일어나면 Galloping모드로 치환하는 등)\n\n### 알고리즘 (detail)\n\n다시 알고리즘을 세분화하여 다시 작성해 보자.\n\n1. minrun을 찾는다. ([listsort.txt](https://github.com/python/cpython/blob/main/Objects/listsort.txt)의 313줄 참고)\n2. 배열의 앞부분부터 run을 생성한다.\n   1. minrun만큼 잘라 binary insertion sort를 수행한다. (처음 두 원소가 증가하는 방향이면 increase 정렬을, 감소하는 방향이면 decrease정렬을 수행한다)\n   2. 그 뒤에 오는 원소들을 run에 합쳐도 증가/감소하는 방향을 유지할 수 있다면 run에 붙인다.\n3. 생성한 run을 stack에 추가한다.\n   1. stack의 길이가 3보다 크다면, 스택 상위 3개의 원소(A,B,C)를 다음 조건에 맞는지 확인한다.\n   - |B| > |A|\n   - [C| > |A| + |B|\n   2. 조건에 부합하지 않으면 B를 A와 C중 작은 쪽과 병합(merge)한다. 이를 조건에 부합할 때까지 반복한다.\n4. 2번으로 돌아가 다음 run을 생성한다.\n5. 모든 run 생성을 마치고 Stack에 run이 모두 채워졌다면 스택의 맨 위 원소부터 병합을 수행한다.\n\n### Timsort의 시간복잡도\n\nInsertion Sort의 최선 시간복잡도는 O(n), run을 생성한 결과 run이 1개만 나온 경우 (즉, 이미 정렬된 경우) O(n)의 시간복잡도를 가진다.\n따라서 Timsort의 최선 시간복잡도는 O(n)이다.\n\n나머지는 사실상 Merge Sort가 진행되는 것과 같기 때문에 최악 시간복잡도와 평균 시간복잡도는 O(nlogn)이다.\n\n## V8의 Torque\n\n이 부분은 간단하게만 언급하려고 한다. V8은 Torque라는 V8용 언어를 지원하며, 이 언어를 통해 V8의 JIT 수행에서 미리 컴파일 된 코드를 제공하도록 만들 수 있다.\nV8은 Torque로 기존 js로 작성된 Array#sort를 다시 작성했으며, 이를 통해 속도를 더욱 끌어올렸다. 구체적인 설명은 [Introducing V8 Torque](https://v8.dev/blog/array-sort#introducing-v8-torque)를 참고하면 된다.\n\n## 참고\n\n[V8 Blog - array-sort](https://v8.dev/blog/array-sort)\n[위키피디아 - Timsort](https://en.wikipedia.org/wiki/Timsort)\n[cpython - Timsort](https://github.com/python/cpython/blob/main/Objects/listsort.txt)\n[D2 - Timsort에 대해 알아보자](https://d2.naver.com/helloworld/0315536)\n","data":{"title":"V8의 `Array.sort`는 어떻게 동작하는가?","published":"2024-04-23T13:57:24.083Z","modified":"2024-04-23T13:57:24.083Z","slug":"how-does-v8-array-sort-work","image":"./images/fibonacci.jpg","draft":true,"tags":["V8","sort","js"],"summary":"대충 요약하는 내용"},"isEmpty":false,"excerpt":""},{"content":"\n## 개요\n\n지난 1~2년 사이 AI의 발전은 놀라웠고, 우리 삶의 많은 부분을 바꾸어놨다.\n\n![Monalisa image drawed by Google Deep dream](./images/monalisa-with-google-deep-dream.jpg)_출처: [위키피디아: DeepDream](https://en.wikipedia.org/wiki/DeepDream)_\n\n2017년에 대학 교수님이 “이제는 컴퓨터가 그림도 그린다”며 위 이미지를 보여주셨던 것이 기억난다. 당시에는 딱히 위기감이 들지 않았다. 결과물은 형편없었고, 이미지가 필요하면 내가 직접 그리거나 그림을 잘 그리는 사람의 도움을 받아야 했다.\n\n그 뒤로 GPT라는 거대한 모델의 등장과 함께 AI는 급격하게 발전했고, 순식간에 캐즘을 뛰어넘었다. 이제는 돈을 주고 이용할 만큼 꽤 그럴싸한 그림을 만들어내고 있다.\n\n그렇다. AI는 이제 우리 곁으로 다가왔고, 우리 개발자들은 AI를 이용한 서비스를 제공해야 한다. 이 글에서는 AI가 어떤 모습으로 서비스에 녹아들었는지, 그리고 프론트엔드 개발자들에게 어떤 역량이 중요해질지 예측해본다.\n\n## 서비스에서의 AI\n\nAI는 게임 체인저이다. 게임 체인저는 시장의 판도를 바꿀 만큼 기존의 다른 제품들보다 압도적으로 좋기 때문에, 따라가지 못하면 도태된다. OpenAI가 주도하는 이 시장에 돈이 쏟아지고 있으며, 시장의 변화에 따라 우리가 만드는 서비스의 양상도 완전히 달라졌다.\n\n### AI 보조(Assistant)\n\n![Canva의 AI 이미지 생성 기능](./images/canva-magic-media.png)_출처: [Canva의 Magic Media](https://www.canva.com/ai-image-generator/)_  \n![노션의 AI 글쓰기 기능](./images/notion-ai.png)_출처: 글쓴이의 notion_\n\n기존 서비스들은 AI를 위한 메뉴(AI Assistant)를 추가하는 식으로 AI를 접목시켰다. 기존의 서비스 구조에 AI를 접목하는 것은 메뉴를 하나 빼서 추가하는 게 가장 빠른 방법이었을 것이다.\n\nAI 보조는 기존에 서비스에서 할 수 있던 것들을 더 편하게 혹은 더 잘할 수 있게 도와준다. 이들은 **생성의 주체가 아니라 보조이다.**\n\nNotion은 초기엔 생성의 주체로 AI를 도입했다. 주로 글을 생성해주는 기능이었는데, 욕을 많이 먹었다. AI가 유저가 원하는 것을 생성해주지 않았기 때문이다. 노션에서도 이를 인식하고 AI를 완전히 재설계했다. ([노션 블로그 참고](https://www.notion.so/blog/notion-ai-is-here-for-everyone)) 지금은 유저가 글을 작성하고 맞춤법을 수정하거나 관련된 문서를 찾고 요약하는 등, 유저의 행동에 더욱 필요한 도움을 주는 방향으로 AI를 사용하고 있다.\n\n### AI 도구(Tool)\n\nAI가 생성의 주체인 서비스들도 존재한다. AI로 인해 그전에는 꿈에도 꾸지 못하던 콘텐츠 생성이 가능해졌고, 도구의 형태로 AI를 지원하는 서비스들이 대량으로 등장했다. 이미지를 생성하는 Midjourney, Flux를 비롯해 교육, 번역, 코딩 등 다양한 분야에 AI를 접목할 수 있게 되면서, 그와 관련된 도구들이 만들어지고 있다.\n\nAI 도구들은 앞선 AI 보조와 달리 **AI 자체가 서비스이다.** 대체로 유저가 직접 생성하기 어려운 것들에 대해 생성을 위탁한다. 여기서 어려움이란 반복적인 노가다성 작업일 수도 있고, 음성이나 이미지처럼 고급 스킬이 필요한 작업일 수도 있다.\n\n![Flux의 Prompt](./images/flux-prompt.png)_출처: [Flux](https://flux-ai.io/flux-ai-image-generator/)_\n\nAI 도구의 특징은 **UI가 아주 단순하다**는 것이다. 더 이상 이미지를 만들어내기 위해 포토샵의 복잡한 도구들과 레이어, 픽셀 유동화 등의 개념을 이해할 필요가 없다. 그저 원하는 것을 잘 설명하는 것만으로 충분하다.\n\n## 프론트엔드 개발자는 어떻게 바뀔 것인가?\n\n### 더욱 인간스럽게\n\n![인터스텔라의 타스](./images/interstellar-tars.png)_출처: [익스트림무비](https://extmovie.com/movietalk/5790977)_\n\nNotion AI에서 인터랙티브한 AI의 형상을 배치했듯, 보조가 된 AI는 점차 ‘불쾌한 골짜기’를 줄여가며 자비스, 타스와 가까워질 것으로 기대된다. 반대로 말하면, 프론트엔드 개발자들은 그만큼 인터랙션을 깎고 다듬어야 할 것이다.\n\n이에 따라 CSS, JS를 활용한 인터랙티브한 애니메이션 기술을 잘 다루는 것이 기대된다.\n\n### 직관적인 UI\n\n앞서 Flux에서도 보았고, ChatGPT를 써보았다면 알겠지만, AI는 복잡한 사용법을 요구하지 않는다. 필요한 것은 한 줄의 프롬프트 입력창뿐이다. 유저가 궁극적으로 원하는 것도 **딸깍** 한 번이면 원하는 것을 생성하는 것이다.\n\n긍정적으로 AI가 더욱 발전한다고 가정할 때, 우리는 궁극적으로 유저에게 딱 한 가지만 제공하면 될 것이다. 바로 ‘AI와 대화할 수 있는 수단’이다. 메뉴도 만들 필요 없고, 유저가 다음 행동을 하도록 유도하는 복잡한 가이드도 필요 없을 것이다. 유저는 더 이상 학습할 필요가 없다.\n\n이에 따라 프론트엔드에서는 실시간으로 소통하고 부드럽게 화면에 전달할 수 있는 기술이 중요해질 것으로 보인다. 스트리밍, 실시간 통신 기술 등의 네트워크 역량도 필요해질 것 같다.\n\n### 에디터\n\nAI의 발전이 한계에 도달한다고 예측한다면, AI가 하지 못하는 부분을 유저가 채우는 방식으로 서비스가 진화할 것이다. 그 말은 결국, 원하는 부분을 채우기 위해 유저가 조작하고 다룰 수 있는 에디터가 필요해진다는 뜻이다. 물론 AI의 발전 과도기에도 에디터는 필요할 것 같다.\n\n에디터는 클라이언트에서 구동되는 복잡한 인터랙션과 성능이 중요하기 때문에, UI에 대한 심도 있는 이해와 구현력, 최적화, 혹은 WASM 같은 프론트엔드의 고난이도 기술 및 신기술들을 다룰 수 있어야 할 것으로 보인다.\n","data":{"title":"AI와 함께하는 프론트엔드 개발자의 미래","published":"2024-10-20T19:40:24.000Z","modified":"2024-10-20T19:40:24.000Z","slug":"the-future-of-frontend-developers-with-ai","draft":true,"tags":["ai","frontend"],"summary":"AI가 어떤 형상으로 서비스화 되었는지, 이에 따라 프론트엔드 개발자에겐 어떤 역량이 중요해질지 예측해본다."},"isEmpty":false,"excerpt":""}]